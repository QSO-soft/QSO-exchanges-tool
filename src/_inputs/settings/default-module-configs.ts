import { DefaultModuleConfigs } from '../../types';

// ВНИМАНИЕ! Вам не обязательно в роутах дублировать настройки, которые уже указали в default-module-configs.ts, так как в первую очередь мы настройки берём от сюда,
// а уже потом берём их для каждого роута отдельно, но вы так же можете и указывать все настройки в роуте - это не будет ошибкой. Работайте, как удобно.
// Нельзя добавлять новые поля в данном файле! Изменять можно только существующие!
// Внутри роутов, можно создавать поля исходя из тех, которые указаны в этом конфиге.

// ============================ DESCRIPTION ============================
// Описание общих настроек внутри модулей
// avnu: { - Название модуля. Внутри роутов, называется moduleName
//   count: [1, 1], - Количество повторений данного модуля в диапазоне ОТ и ДО
//   delay: [30, 60], - Задержка между транзакций внутри одного модуля ОТ и ДО
//   indexGroup: 1, - Индекс, который нам помогает понять в какой последовательности вы хотите запускать модули, а
//                    так же позволяет перемешивать все модули между собой с одинаковым индексом.
//
//   minAndMaxAmount: [0.2, 0.3], - Количество токенов, которое будет использоваться в работе в диапазоне ОТ и ДО
//   reverseMinAndMaxAmount: [99.99, 99.99], - Процентов токенов в диапазоне ОТ и ДО, которое будет использовано при обратном свапе. [99.99, 99.99] - дефолтное значение
//   usePercentBalance: true, - Нужно ли успользовать проценты, вместо целых чисел.
//                              Если стоит true, тогда minAndMaxAmount значения будут использоваться как проценты! minAndMaxAmount: [80, 90] - от 80% до 90%
//
//   minNativeBalance: 0.0000001, - Минимальный баланс, который должен быть для выполнения профиля.
//                                  Мы смотрим на нативный баланс сети и выполняем модуль, только если баланс выше значения, которое вы указали
//
//   maxGas: ['eth', 25], - Максимальный gwei в конкретной сети, если gwei будет выше указанного значение, тогда скрипт будет ждать, пока он не опустится
//   gweiRange: [0, 0], - Диапазон вашего кастомного gwei, который будет применяться для транзакций
//   gasLimitRange: [0, 0], - Диапазон вашего кастомного gas limit, который будет применяться для транзакций
//   pairs: ['ETH', 'USDC'], - Пара токенов, которые будут использоваться. Из какого токена и в какой токен нужно провести транзакцию.
//   reverse: true, - Выполняет точно такую же транзакцию, только наоборот. Если вы свапали например 0.1 ETH в USDC, тогда ~190 USDC вернётся обрано в 0.1 ETH.
//   network: 'bsc', - Сеть в которой будет выполняться модуль
//
//   contractAddress: 'native', - Адрес контракта, который будет использоваться. 'native' или '0x92815....'
//   contractPairs: ['0xEe....eeE', '0x335...f4'], - Пара контрактов, которая будет использоваться в работе.
//                                                   Первый контракт это ИЗ которого делаете swap, а второй В который оно прийдёт
//
//   stopWalletOnError: true, - Если поле стоит в true, значит при получении ошибки внутри модуля скрипт остановит
//                              своё выполнение для этого кошелька и возьмёт следующий кошелёк
// }

// Конфиг, который будет применяться для каждого модуля по умолчанию в случае, если вы пропусили какие-то параметры в роуте

export const defaultModuleConfigs: DefaultModuleConfigs = {
  // ============== General ==============
  'balance-checker': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть в которой будет выполняться модуль (bsc | opBNB | eth | optimism | zkSync | arbitrum | polygon | zora | base )
    network: 'bsc',

    // Контракт токена для проверки баланса или используйте 'native' для проверки баланса нативного токена указанной сети
    contractAddress: 'native',
  },
  'check-native-balance': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть в которой будет выполняться модуль (bsc | opBNB | eth | optimism | zkSync | arbitrum | polygon | zora | base )
    network: 'arbitrum',

    stopWalletOnError: true,
    minNativeBalance: 0.0000001,
  },
  'transfer-token': {
    count: [1, 1],
    indexGroup: 1,

    // Диапазон для трансфера
    minAndMaxAmount: [0.0001, 0.0003],
    usePercentBalance: false,

    // Сеть в которой будет выполняться модуль (bsc | opBNB | eth | optimism | zkSync | arbitrum | polygon | zora | base )
    network: 'bsc',

    // Контракт токена для трансфера или используйте 'native' для трансфера нативного токена указанной сети
    contractAddress: 'native',

    // Модуль будет выполнен, только, если баланс указанного токена будет выше данного значения
    minTokenBalance: 0,

    // gweiRange: [0, 0],
  },

  // ============== OKX ==============
  'okx-collect': {
    count: [1, 1],
    indexGroup: 0,

    // Аккаунты для которых будет выполняться модуль
    // Формат: ['accountName1', 'accountName2', ...]
    // Названия должны соответствовать таковым в global.js, в противном случае они будут проигнорированы
    // Так-же можно указать 'all' и тогда модуль выполнится для всех аккаунтов в global.js
    okxAccounts: 'all',

    // Будет собирать только указанные токены
    // Если оставить пустым [], то попробует собрать все возможные токены
    collectTokens: ['BNB', 'ETH', 'USDT', 'USDC', 'DAI'],
  },
  'okx-withdraw': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть из которой нужно делать вывод с OKX. eth | optimism | polygon | zkSync
    okxWithdrawNetwork: 'optimism',
    // При указании данного поля сеть для вывода будет выбрана рандомно из списка
    // Работает только, если useUsd = true
    // randomOkxWithdrawNetworks: ['optimism', 'polygon', 'arbitrum'],

    // При рандомных сетях будет браться нативный токен сети
    tokenToWithdraw: 'ETH',

    // Сумма в диапазоне ОТ и ДО, которая будет выведена с OKX в токене, который указан в tokenToWithdraw
    minAndMaxAmount: [1.1, 1.2],

    // Если баланс токена в tokenToWithdraw будет ниже этого значения, только тогда будет авто-пополнение
    minTokenBalance: 0.0003,

    // Модуль будет выполнен, только, если высчитанный amount вместе с fee будет больше указанного значение
    minAmount: 0,

    // Ожидаемый баланс на кошельке, который должен быть после выполнения модуля. При указании данного параметра, minAndMaxAmount и minNativeBalance не учитываются
    expectedBalance: [0, 0],

    // Использовать ли USD как значения балансов, amount
    useUsd: false,
  },
  'okx-wait-balance': {
    count: [1, 1],
    indexGroup: 0,

    // Минимальный баланс токенов для ожидания
    waitBalance: 1,

    // Токены баланс которых будет ожидать
    collectTokens: ['ETH'],

    // Время в секундах, которое будет ожидать между проверками баланса
    waitTime: 60 * 5, // 5m

    // Аккаунты для которых будет выполняться модуль
    // Формат: ['accountName1', 'accountName2', ...]
    // Названия должны соответствовать таковым в global.js, в противном случае они будут проигнорированы
    // Так-же можно указать 'all' и тогда модуль выполнится для всех аккаунтов в global.js
    okxAccounts: 'all',
  },

  // ============== Binance ==============
  'binance-withdraw': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть из которой нужно делать вывод с Binance. bsc | opBNB | polygon
    binanceWithdrawNetwork: 'bsc',

    // При рандомных сетях будет браться нативный токен сети
    tokenToWithdraw: 'BNB',

    // При указании данного поля сеть для вывода будет выбрана рандомно из списка
    // Работает только, если useUsd = true
    randomBinanceWithdrawNetworks: [],

    // Сумма в диапазоне ОТ и ДО, которая будет выведена с Binance в токене, который указан в tokenToWithdraw
    minAndMaxAmount: [0.009, 0.0095],

    // Если баланс токена в tokenToWithdraw будет ниже этого значения, только тогда будет авто-пополнение
    minTokenBalance: 0.0003,

    // Где именно смотреть баланс minNativeBalance
    // minNativeBalanceNetwork: 'bsc',

    // Модуль будет выполнен, только, если высчитанный amount вместе с fee будет больше указанного значение
    minAmount: 0,

    // Ожидаемый баланс на кошельке, который должен быть после выполнения модуля. При указании данного параметра, minAndMaxAmount и minNativeBalance не учитываются
    expectedBalance: [0, 0],

    // Использовать ли USD как значения балансов, amount
    useUsd: false,
  },

  // ============== Bitget ==============
  'bitget-withdraw': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть из которой нужно делать вывод с Bitget. eth | bsc | optimism | polygon | arbitrum
    // network: 'bsc',
    // Токен, который будет выведен. USDV | USDC | USDT | BNB | ETH
    // tokenToWithdraw: 'USDV',

    minAndMaxAmount: [31, 33],
    usePercentBalance: false,

    stopWalletOnError: true,

    // Минимальное кол-во токена, при котором будет выполнен withdraw
    minTokenBalance: 25,

    // minAmount: 25,

    waitTime: 60,
  },
  'bitget-deposit': {
    count: [1, 1],
    indexGroup: 1,
    delay: [0, 0],

    // Сеть из которой нужно делать депозит в Bitget. eth | bsc | optimism | polygon | arbitrum
    // network: 'bsc',
    // Токен, который будет выведен. USDV | USDC | USDT | BNB | ETH
    // tokenToWithdraw: 'USDV',
    minAndMaxAmount: [100, 100],
    usePercentBalance: true,

    // minAmount: 25,

    // Выполнит депозит, только, если баланс выше указанного значения
    minTokenBalance: 10,

    stopWalletOnError: true,
  },
  'bitget-collect': {
    count: [1, 1],
    indexGroup: 2,

    // Токены, которые будет собраны. USDV | USDC | USDT | BNB | ETH
    collectTokens: [],
  },
  'bitget-wait-balance': {
    count: [1, 1],
    indexGroup: 0,

    // Минимальный баланс токенов для ожидания
    minTokenBalance: 30,

    // Токены баланс которых будет ожидать
    collectTokens: ['USDT', 'USDC'],

    // Время в секундах, которое будет ожидать между проверками баланса
    waitTime: 60 * 10, // 10m
  },

  // ============== Other ==============
  'gate-withdraw': {
    count: [1, 1],
    indexGroup: 0,

    // Сеть из которой нужно делать вывод с Gate. eth
    network: 'eth',
    tokenToWithdraw: 'ETH',

    // Сумма в диапазоне ОТ и ДО, которая будет выведена с Gate в токене, который указан в tokenToWithdraw
    minAndMaxAmount: [0.011, 0.012],

    // Если баланс токена в tokenToWithdraw будет ниже этого значения, только тогда будет авто-пополнение
    minTokenBalance: 0,

    // Модуль будет выполнен, только, если высчитанный amount будет больше указанного значение
    minAmount: 0,
  },
};
